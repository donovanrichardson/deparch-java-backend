/*
 * This file is generated by jOOQ.
 */
package com.schema.tables;


import com.schema.Gtfs;
import com.schema.Indexes;
import com.schema.Keys;
import com.schema.tables.records.ServiceRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Service extends TableImpl<ServiceRecord> {

    private static final long serialVersionUID = 1862754493;

    /**
     * The reference instance of <code>gtfs.service</code>
     */
    public static final Service SERVICE = new Service();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceRecord> getRecordType() {
        return ServiceRecord.class;
    }

    /**
     * The column <code>gtfs.service.service_id</code>. calendar.txt
     */
    public final TableField<ServiceRecord, String> SERVICE_ID = createField("service_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "calendar.txt");

    /**
     * The column <code>gtfs.service.monday</code>.
     */
    public final TableField<ServiceRecord, Byte> MONDAY = createField("monday", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gtfs.service.tuesday</code>.
     */
    public final TableField<ServiceRecord, Byte> TUESDAY = createField("tuesday", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gtfs.service.wednesday</code>.
     */
    public final TableField<ServiceRecord, Byte> WEDNESDAY = createField("wednesday", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gtfs.service.thursday</code>.
     */
    public final TableField<ServiceRecord, Byte> THURSDAY = createField("thursday", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gtfs.service.friday</code>.
     */
    public final TableField<ServiceRecord, Byte> FRIDAY = createField("friday", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gtfs.service.saturday</code>.
     */
    public final TableField<ServiceRecord, Byte> SATURDAY = createField("saturday", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gtfs.service.sunday</code>.
     */
    public final TableField<ServiceRecord, Byte> SUNDAY = createField("sunday", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gtfs.service.start_date</code>.
     */
    public final TableField<ServiceRecord, String> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>gtfs.service.end_date</code>.
     */
    public final TableField<ServiceRecord, String> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>gtfs.service.feed_version</code>.
     */
    public final TableField<ServiceRecord, String> FEED_VERSION = createField("feed_version", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>gtfs.service</code> table reference
     */
    public Service() {
        this(DSL.name("service"), null);
    }

    /**
     * Create an aliased <code>gtfs.service</code> table reference
     */
    public Service(String alias) {
        this(DSL.name(alias), SERVICE);
    }

    /**
     * Create an aliased <code>gtfs.service</code> table reference
     */
    public Service(Name alias) {
        this(alias, SERVICE);
    }

    private Service(Name alias, Table<ServiceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Service(Name alias, Table<ServiceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Service(Table<O> child, ForeignKey<O, ServiceRecord> key) {
        super(child, key, SERVICE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gtfs.GTFS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SERVICE_PRIMARY, Indexes.SERVICE_SERVICE_FEED_VERSION_FK, Indexes.SERVICE_SERVICE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServiceRecord> getPrimaryKey() {
        return Keys.KEY_SERVICE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServiceRecord>> getKeys() {
        return Arrays.<UniqueKey<ServiceRecord>>asList(Keys.KEY_SERVICE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ServiceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ServiceRecord, ?>>asList(Keys.SERVICE_FEED_VERSION_FK);
    }

    public FeedVersion feedVersion() {
        return new FeedVersion(this, Keys.SERVICE_FEED_VERSION_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Service as(String alias) {
        return new Service(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Service as(Name alias) {
        return new Service(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Service rename(String name) {
        return new Service(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Service rename(Name name) {
        return new Service(name, null);
    }
}
