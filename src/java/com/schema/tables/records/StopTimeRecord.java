/*
 * This file is generated by jOOQ.
 */
package com.schema.tables.records;


import com.schema.tables.StopTime;

import java.sql.Time;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record11;
import org.jooq.Record3;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StopTimeRecord extends UpdatableRecordImpl<StopTimeRecord> implements Record11<String, Time, Time, String, UInteger, String, UByte, UByte, Double, Byte, String> {

    private static final long serialVersionUID = -754885693;

    /**
     * Setter for <code>gtfs.stop_time.trip_id</code>.
     */
    public void setTripId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>gtfs.stop_time.trip_id</code>.
     */
    public String getTripId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>gtfs.stop_time.arrival_time</code>.
     */
    public void setArrivalTime(Time value) {
        set(1, value);
    }

    /**
     * Getter for <code>gtfs.stop_time.arrival_time</code>.
     */
    public Time getArrivalTime() {
        return (Time) get(1);
    }

    /**
     * Setter for <code>gtfs.stop_time.departure_time</code>.
     */
    public void setDepartureTime(Time value) {
        set(2, value);
    }

    /**
     * Getter for <code>gtfs.stop_time.departure_time</code>.
     */
    public Time getDepartureTime() {
        return (Time) get(2);
    }

    /**
     * Setter for <code>gtfs.stop_time.stop_id</code>.
     */
    public void setStopId(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>gtfs.stop_time.stop_id</code>.
     */
    public String getStopId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>gtfs.stop_time.stop_sequence</code>.
     */
    public void setStopSequence(UInteger value) {
        set(4, value);
    }

    /**
     * Getter for <code>gtfs.stop_time.stop_sequence</code>.
     */
    public UInteger getStopSequence() {
        return (UInteger) get(4);
    }

    /**
     * Setter for <code>gtfs.stop_time.stop_headsign</code>.
     */
    public void setStopHeadsign(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>gtfs.stop_time.stop_headsign</code>.
     */
    public String getStopHeadsign() {
        return (String) get(5);
    }

    /**
     * Setter for <code>gtfs.stop_time.pickup_type</code>.
     */
    public void setPickupType(UByte value) {
        set(6, value);
    }

    /**
     * Getter for <code>gtfs.stop_time.pickup_type</code>.
     */
    public UByte getPickupType() {
        return (UByte) get(6);
    }

    /**
     * Setter for <code>gtfs.stop_time.drop_off_type</code>.
     */
    public void setDropOffType(UByte value) {
        set(7, value);
    }

    /**
     * Getter for <code>gtfs.stop_time.drop_off_type</code>.
     */
    public UByte getDropOffType() {
        return (UByte) get(7);
    }

    /**
     * Setter for <code>gtfs.stop_time.shape_dist_traveled</code>.
     */
    public void setShapeDistTraveled(Double value) {
        set(8, value);
    }

    /**
     * Getter for <code>gtfs.stop_time.shape_dist_traveled</code>.
     */
    public Double getShapeDistTraveled() {
        return (Double) get(8);
    }

    /**
     * Setter for <code>gtfs.stop_time.timepoint</code>.
     */
    public void setTimepoint(Byte value) {
        set(9, value);
    }

    /**
     * Getter for <code>gtfs.stop_time.timepoint</code>.
     */
    public Byte getTimepoint() {
        return (Byte) get(9);
    }

    /**
     * Setter for <code>gtfs.stop_time.feed_version</code>.
     */
    public void setFeedVersion(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>gtfs.stop_time.feed_version</code>.
     */
    public String getFeedVersion() {
        return (String) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record3<String, UInteger, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row11<String, Time, Time, String, UInteger, String, UByte, UByte, Double, Byte, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row11<String, Time, Time, String, UInteger, String, UByte, UByte, Double, Byte, String> valuesRow() {
        return (Row11) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return StopTime.STOP_TIME.TRIP_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Time> field2() {
        return StopTime.STOP_TIME.ARRIVAL_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Time> field3() {
        return StopTime.STOP_TIME.DEPARTURE_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return StopTime.STOP_TIME.STOP_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field5() {
        return StopTime.STOP_TIME.STOP_SEQUENCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return StopTime.STOP_TIME.STOP_HEADSIGN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UByte> field7() {
        return StopTime.STOP_TIME.PICKUP_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UByte> field8() {
        return StopTime.STOP_TIME.DROP_OFF_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field9() {
        return StopTime.STOP_TIME.SHAPE_DIST_TRAVELED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field10() {
        return StopTime.STOP_TIME.TIMEPOINT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field11() {
        return StopTime.STOP_TIME.FEED_VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getTripId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Time component2() {
        return getArrivalTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Time component3() {
        return getDepartureTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getStopId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component5() {
        return getStopSequence();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getStopHeadsign();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UByte component7() {
        return getPickupType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UByte component8() {
        return getDropOffType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component9() {
        return getShapeDistTraveled();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte component10() {
        return getTimepoint();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component11() {
        return getFeedVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getTripId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Time value2() {
        return getArrivalTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Time value3() {
        return getDepartureTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getStopId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value5() {
        return getStopSequence();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getStopHeadsign();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UByte value7() {
        return getPickupType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UByte value8() {
        return getDropOffType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value9() {
        return getShapeDistTraveled();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value10() {
        return getTimepoint();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value11() {
        return getFeedVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord value1(String value) {
        setTripId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord value2(Time value) {
        setArrivalTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord value3(Time value) {
        setDepartureTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord value4(String value) {
        setStopId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord value5(UInteger value) {
        setStopSequence(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord value6(String value) {
        setStopHeadsign(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord value7(UByte value) {
        setPickupType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord value8(UByte value) {
        setDropOffType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord value9(Double value) {
        setShapeDistTraveled(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord value10(Byte value) {
        setTimepoint(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord value11(String value) {
        setFeedVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StopTimeRecord values(String value1, Time value2, Time value3, String value4, UInteger value5, String value6, UByte value7, UByte value8, Double value9, Byte value10, String value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StopTimeRecord
     */
    public StopTimeRecord() {
        super(StopTime.STOP_TIME);
    }

    /**
     * Create a detached, initialised StopTimeRecord
     */
    public StopTimeRecord(String tripId, Time arrivalTime, Time departureTime, String stopId, UInteger stopSequence, String stopHeadsign, UByte pickupType, UByte dropOffType, Double shapeDistTraveled, Byte timepoint, String feedVersion) {
        super(StopTime.STOP_TIME);

        set(0, tripId);
        set(1, arrivalTime);
        set(2, departureTime);
        set(3, stopId);
        set(4, stopSequence);
        set(5, stopHeadsign);
        set(6, pickupType);
        set(7, dropOffType);
        set(8, shapeDistTraveled);
        set(9, timepoint);
        set(10, feedVersion);
    }
}
