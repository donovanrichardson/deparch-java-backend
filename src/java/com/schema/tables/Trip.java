/*
 * This file is generated by jOOQ.
 */
package com.schema.tables;


import com.schema.Gtfs;
import com.schema.Indexes;
import com.schema.Keys;
import com.schema.tables.records.TripRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trip extends TableImpl<TripRecord> {

    private static final long serialVersionUID = -1125671916;

    /**
     * The reference instance of <code>gtfs.trip</code>
     */
    public static final Trip TRIP = new Trip();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TripRecord> getRecordType() {
        return TripRecord.class;
    }

    /**
     * The column <code>gtfs.trip.route_id</code>.
     */
    public final TableField<TripRecord, String> ROUTE_ID = createField("route_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gtfs.trip.service_id</code>.
     */
    public final TableField<TripRecord, String> SERVICE_ID = createField("service_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gtfs.trip.trip_id</code>.
     */
    public final TableField<TripRecord, String> TRIP_ID = createField("trip_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gtfs.trip.trip_headsign</code>.
     */
    public final TableField<TripRecord, String> TRIP_HEADSIGN = createField("trip_headsign", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>gtfs.trip.trip_short_name</code>.
     */
    public final TableField<TripRecord, String> TRIP_SHORT_NAME = createField("trip_short_name", org.jooq.impl.SQLDataType.VARCHAR(128).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gtfs.trip.direction_id</code>.
     */
    public final TableField<TripRecord, Byte> DIRECTION_ID = createField("direction_id", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>gtfs.trip.block_id</code>.
     */
    public final TableField<TripRecord, String> BLOCK_ID = createField("block_id", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>gtfs.trip.shape_id</code>.
     */
    public final TableField<TripRecord, String> SHAPE_ID = createField("shape_id", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>gtfs.trip.wheelchair_accessible</code>.
     */
    public final TableField<TripRecord, Byte> WHEELCHAIR_ACCESSIBLE = createField("wheelchair_accessible", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gtfs.trip.bikes_allowed</code>.
     */
    public final TableField<TripRecord, Byte> BIKES_ALLOWED = createField("bikes_allowed", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gtfs.trip.feed_version</code>.
     */
    public final TableField<TripRecord, String> FEED_VERSION = createField("feed_version", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>gtfs.trip</code> table reference
     */
    public Trip() {
        this(DSL.name("trip"), null);
    }

    /**
     * Create an aliased <code>gtfs.trip</code> table reference
     */
    public Trip(String alias) {
        this(DSL.name(alias), TRIP);
    }

    /**
     * Create an aliased <code>gtfs.trip</code> table reference
     */
    public Trip(Name alias) {
        this(alias, TRIP);
    }

    private Trip(Name alias, Table<TripRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trip(Name alias, Table<TripRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Trip(Table<O> child, ForeignKey<O, TripRecord> key) {
        super(child, key, TRIP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gtfs.GTFS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRIP_PRIMARY, Indexes.TRIP_ROUTE_ID_2, Indexes.TRIP_SERVICE_ID, Indexes.TRIP_SHAPE_ID, Indexes.TRIP_TRIP_FEED_VERSION_FK, Indexes.TRIP_TRIP_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TripRecord> getPrimaryKey() {
        return Keys.KEY_TRIP_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TripRecord>> getKeys() {
        return Arrays.<UniqueKey<TripRecord>>asList(Keys.KEY_TRIP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TripRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TripRecord, ?>>asList(Keys.TRIP_IBFK_1, Keys.TRIP_IBFK_2, Keys.TRIP_IBFK_3, Keys.TRIP_FEED_VERSION_FK);
    }

    public Route route() {
        return new Route(this, Keys.TRIP_IBFK_1);
    }

    public Service service() {
        return new Service(this, Keys.TRIP_IBFK_2);
    }

    public Shape shape() {
        return new Shape(this, Keys.TRIP_IBFK_3);
    }

    public FeedVersion feedVersion() {
        return new FeedVersion(this, Keys.TRIP_FEED_VERSION_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Trip as(String alias) {
        return new Trip(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Trip as(Name alias) {
        return new Trip(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trip rename(String name) {
        return new Trip(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trip rename(Name name) {
        return new Trip(name, null);
    }
}
