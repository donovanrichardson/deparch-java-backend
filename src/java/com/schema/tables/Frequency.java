/*
 * This file is generated by jOOQ.
 */
package com.schema.tables;


import com.schema.Gtfs;
import com.schema.Indexes;
import com.schema.Keys;
import com.schema.tables.records.FrequencyRecord;

import java.sql.Time;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Frequency extends TableImpl<FrequencyRecord> {

    private static final long serialVersionUID = 1559719377;

    /**
     * The reference instance of <code>gtfs.frequency</code>
     */
    public static final Frequency FREQUENCY = new Frequency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FrequencyRecord> getRecordType() {
        return FrequencyRecord.class;
    }

    /**
     * The column <code>gtfs.frequency.trip_id</code>.
     */
    public final TableField<FrequencyRecord, String> TRIP_ID = createField("trip_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gtfs.frequency.start_time</code>.
     */
    public final TableField<FrequencyRecord, Time> START_TIME = createField("start_time", org.jooq.impl.SQLDataType.TIME.nullable(false), this, "");

    /**
     * The column <code>gtfs.frequency.end_time</code>.
     */
    public final TableField<FrequencyRecord, Time> END_TIME = createField("end_time", org.jooq.impl.SQLDataType.TIME.nullable(false), this, "");

    /**
     * The column <code>gtfs.frequency.headway_secs</code>.
     */
    public final TableField<FrequencyRecord, UInteger> HEADWAY_SECS = createField("headway_secs", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>gtfs.frequency.exact_times</code>.
     */
    public final TableField<FrequencyRecord, Byte> EXACT_TIMES = createField("exact_times", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>gtfs.frequency.feed_version</code>.
     */
    public final TableField<FrequencyRecord, String> FEED_VERSION = createField("feed_version", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>gtfs.frequency</code> table reference
     */
    public Frequency() {
        this(DSL.name("frequency"), null);
    }

    /**
     * Create an aliased <code>gtfs.frequency</code> table reference
     */
    public Frequency(String alias) {
        this(DSL.name(alias), FREQUENCY);
    }

    /**
     * Create an aliased <code>gtfs.frequency</code> table reference
     */
    public Frequency(Name alias) {
        this(alias, FREQUENCY);
    }

    private Frequency(Name alias, Table<FrequencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Frequency(Name alias, Table<FrequencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Frequency(Table<O> child, ForeignKey<O, FrequencyRecord> key) {
        super(child, key, FREQUENCY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gtfs.GTFS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FREQUENCY_FREQUENCY_FEED_VERSION_FK, Indexes.FREQUENCY_PRIMARY, Indexes.FREQUENCY_TRIP_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FrequencyRecord> getPrimaryKey() {
        return Keys.KEY_FREQUENCY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FrequencyRecord>> getKeys() {
        return Arrays.<UniqueKey<FrequencyRecord>>asList(Keys.KEY_FREQUENCY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FrequencyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FrequencyRecord, ?>>asList(Keys.FREQUENCY_IBFK_1, Keys.FREQUENCY_FEED_VERSION_FK);
    }

    public Trip trip() {
        return new Trip(this, Keys.FREQUENCY_IBFK_1);
    }

    public FeedVersion feedVersion() {
        return new FeedVersion(this, Keys.FREQUENCY_FEED_VERSION_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Frequency as(String alias) {
        return new Frequency(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Frequency as(Name alias) {
        return new Frequency(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Frequency rename(String name) {
        return new Frequency(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Frequency rename(Name name) {
        return new Frequency(name, null);
    }
}
