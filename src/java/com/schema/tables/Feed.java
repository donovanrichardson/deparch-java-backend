/*
 * This file is generated by jOOQ.
 */
package com.schema.tables;


import com.schema.Gtfs;
import com.schema.Indexes;
import com.schema.Keys;
import com.schema.tables.records.FeedRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Feed extends TableImpl<FeedRecord> {

    private static final long serialVersionUID = -1982745600;

    /**
     * The reference instance of <code>gtfs.feed</code>
     */
    public static final Feed FEED = new Feed();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedRecord> getRecordType() {
        return FeedRecord.class;
    }

    /**
     * The column <code>gtfs.feed.id</code>.
     */
    public final TableField<FeedRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gtfs.feed.type</code>.
     */
    public final TableField<FeedRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("gtfs", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gtfs.feed.title</code>.
     */
    public final TableField<FeedRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gtfs.feed.location</code>.
     */
    public final TableField<FeedRecord, Integer> LOCATION = createField("location", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gtfs.feed.latest</code>.
     */
    public final TableField<FeedRecord, String> LATEST = createField("latest", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>gtfs.feed</code> table reference
     */
    public Feed() {
        this(DSL.name("feed"), null);
    }

    /**
     * Create an aliased <code>gtfs.feed</code> table reference
     */
    public Feed(String alias) {
        this(DSL.name(alias), FEED);
    }

    /**
     * Create an aliased <code>gtfs.feed</code> table reference
     */
    public Feed(Name alias) {
        this(alias, FEED);
    }

    private Feed(Name alias, Table<FeedRecord> aliased) {
        this(alias, aliased, null);
    }

    private Feed(Name alias, Table<FeedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Feed(Table<O> child, ForeignKey<O, FeedRecord> key) {
        super(child, key, FEED);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gtfs.GTFS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FEED_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FeedRecord> getPrimaryKey() {
        return Keys.KEY_FEED_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FeedRecord>> getKeys() {
        return Arrays.<UniqueKey<FeedRecord>>asList(Keys.KEY_FEED_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Feed as(String alias) {
        return new Feed(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Feed as(Name alias) {
        return new Feed(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Feed rename(String name) {
        return new Feed(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feed rename(Name name) {
        return new Feed(name, null);
    }
}
