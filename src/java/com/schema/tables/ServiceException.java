/*
 * This file is generated by jOOQ.
 */
package com.schema.tables;


import com.schema.Gtfs;
import com.schema.Indexes;
import com.schema.Keys;
import com.schema.tables.records.ServiceExceptionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServiceException extends TableImpl<ServiceExceptionRecord> {

    private static final long serialVersionUID = 43814896;

    /**
     * The reference instance of <code>gtfs.service_exception</code>
     */
    public static final ServiceException SERVICE_EXCEPTION = new ServiceException();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceExceptionRecord> getRecordType() {
        return ServiceExceptionRecord.class;
    }

    /**
     * The column <code>gtfs.service_exception.service_id</code>. calendar_dates.txt
     */
    public final TableField<ServiceExceptionRecord, String> SERVICE_ID = createField("service_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "calendar_dates.txt");

    /**
     * The column <code>gtfs.service_exception.date</code>.
     */
    public final TableField<ServiceExceptionRecord, String> DATE = createField("date", org.jooq.impl.SQLDataType.CHAR(8).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>gtfs.service_exception.exception_type</code>.
     */
    public final TableField<ServiceExceptionRecord, UByte> EXCEPTION_TYPE = createField("exception_type", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * The column <code>gtfs.service_exception.feed_version</code>.
     */
    public final TableField<ServiceExceptionRecord, String> FEED_VERSION = createField("feed_version", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>gtfs.service_exception</code> table reference
     */
    public ServiceException() {
        this(DSL.name("service_exception"), null);
    }

    /**
     * Create an aliased <code>gtfs.service_exception</code> table reference
     */
    public ServiceException(String alias) {
        this(DSL.name(alias), SERVICE_EXCEPTION);
    }

    /**
     * Create an aliased <code>gtfs.service_exception</code> table reference
     */
    public ServiceException(Name alias) {
        this(alias, SERVICE_EXCEPTION);
    }

    private ServiceException(Name alias, Table<ServiceExceptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServiceException(Name alias, Table<ServiceExceptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ServiceException(Table<O> child, ForeignKey<O, ServiceExceptionRecord> key) {
        super(child, key, SERVICE_EXCEPTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gtfs.GTFS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SERVICE_EXCEPTION_PRIMARY, Indexes.SERVICE_EXCEPTION_SERVICE_EXCEPTION_FEED_VERSION_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ServiceExceptionRecord> getPrimaryKey() {
        return Keys.KEY_SERVICE_EXCEPTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ServiceExceptionRecord>> getKeys() {
        return Arrays.<UniqueKey<ServiceExceptionRecord>>asList(Keys.KEY_SERVICE_EXCEPTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ServiceExceptionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ServiceExceptionRecord, ?>>asList(Keys.SERVICE_EXCEPTION_IBFK_1, Keys.SERVICE_EXCEPTION_FEED_VERSION_FK);
    }

    public Service service() {
        return new Service(this, Keys.SERVICE_EXCEPTION_IBFK_1);
    }

    public FeedVersion feedVersion() {
        return new FeedVersion(this, Keys.SERVICE_EXCEPTION_FEED_VERSION_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceException as(String alias) {
        return new ServiceException(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ServiceException as(Name alias) {
        return new ServiceException(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceException rename(String name) {
        return new ServiceException(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceException rename(Name name) {
        return new ServiceException(name, null);
    }
}
