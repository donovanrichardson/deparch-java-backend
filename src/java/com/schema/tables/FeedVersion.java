/*
 * This file is generated by jOOQ.
 */
package com.schema.tables;


import com.schema.Gtfs;
import com.schema.Indexes;
import com.schema.Keys;
import com.schema.tables.records.FeedVersionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FeedVersion extends TableImpl<FeedVersionRecord> {

    private static final long serialVersionUID = 619745842;

    /**
     * The reference instance of <code>gtfs.feed_version</code>
     */
    public static final FeedVersion FEED_VERSION = new FeedVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedVersionRecord> getRecordType() {
        return FeedVersionRecord.class;
    }

    /**
     * The column <code>gtfs.feed_version.id</code>.
     */
    public final TableField<FeedVersionRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gtfs.feed_version.feed</code>.
     */
    public final TableField<FeedVersionRecord, String> FEED = createField("feed", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gtfs.feed_version.timestamp</code>.
     */
    public final TableField<FeedVersionRecord, ULong> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>gtfs.feed_version.size</code>.
     */
    public final TableField<FeedVersionRecord, ULong> SIZE = createField("size", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>gtfs.feed_version.url</code>.
     */
    public final TableField<FeedVersionRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gtfs.feed_version.start</code>.
     */
    public final TableField<FeedVersionRecord, String> START = createField("start", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>gtfs.feed_version.finish</code>.
     */
    public final TableField<FeedVersionRecord, String> FINISH = createField("finish", org.jooq.impl.SQLDataType.CHAR(8), this, "");

    /**
     * The column <code>gtfs.feed_version.inserted</code>.
     */
    public final TableField<FeedVersionRecord, Timestamp> INSERTED = createField("inserted", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>gtfs.feed_version</code> table reference
     */
    public FeedVersion() {
        this(DSL.name("feed_version"), null);
    }

    /**
     * Create an aliased <code>gtfs.feed_version</code> table reference
     */
    public FeedVersion(String alias) {
        this(DSL.name(alias), FEED_VERSION);
    }

    /**
     * Create an aliased <code>gtfs.feed_version</code> table reference
     */
    public FeedVersion(Name alias) {
        this(alias, FEED_VERSION);
    }

    private FeedVersion(Name alias, Table<FeedVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeedVersion(Name alias, Table<FeedVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FeedVersion(Table<O> child, ForeignKey<O, FeedVersionRecord> key) {
        super(child, key, FEED_VERSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gtfs.GTFS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FEED_VERSION_FEED, Indexes.FEED_VERSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FeedVersionRecord> getPrimaryKey() {
        return Keys.KEY_FEED_VERSION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FeedVersionRecord>> getKeys() {
        return Arrays.<UniqueKey<FeedVersionRecord>>asList(Keys.KEY_FEED_VERSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FeedVersionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FeedVersionRecord, ?>>asList(Keys.FEED_VERSION_IBFK_1);
    }

    public Feed feed() {
        return new Feed(this, Keys.FEED_VERSION_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeedVersion as(String alias) {
        return new FeedVersion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FeedVersion as(Name alias) {
        return new FeedVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedVersion rename(String name) {
        return new FeedVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedVersion rename(Name name) {
        return new FeedVersion(name, null);
    }
}
