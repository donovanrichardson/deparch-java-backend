/*
 * This file is generated by jOOQ.
 */
package com.schema.tables;


import com.schema.Gtfs;
import com.schema.Indexes;
import com.schema.Keys;
import com.schema.tables.records.ShapeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Shape extends TableImpl<ShapeRecord> {

    private static final long serialVersionUID = -1408362080;

    /**
     * The reference instance of <code>gtfs.shape</code>
     */
    public static final Shape SHAPE = new Shape();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShapeRecord> getRecordType() {
        return ShapeRecord.class;
    }

    /**
     * The column <code>gtfs.shape.shape_id</code>.
     */
    public final TableField<ShapeRecord, String> SHAPE_ID = createField("shape_id", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>gtfs.shape.shape_pt_lat</code>.
     */
    public final TableField<ShapeRecord, Double> SHAPE_PT_LAT = createField("shape_pt_lat", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>gtfs.shape.shape_pt_lon</code>.
     */
    public final TableField<ShapeRecord, Double> SHAPE_PT_LON = createField("shape_pt_lon", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>gtfs.shape.shape_pt_sequence</code>.
     */
    public final TableField<ShapeRecord, UInteger> SHAPE_PT_SEQUENCE = createField("shape_pt_sequence", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>gtfs.shape.shape_dist_traveled</code>.
     */
    public final TableField<ShapeRecord, Double> SHAPE_DIST_TRAVELED = createField("shape_dist_traveled", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>gtfs.shape.feed_version</code>.
     */
    public final TableField<ShapeRecord, String> FEED_VERSION = createField("feed_version", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>gtfs.shape</code> table reference
     */
    public Shape() {
        this(DSL.name("shape"), null);
    }

    /**
     * Create an aliased <code>gtfs.shape</code> table reference
     */
    public Shape(String alias) {
        this(DSL.name(alias), SHAPE);
    }

    /**
     * Create an aliased <code>gtfs.shape</code> table reference
     */
    public Shape(Name alias) {
        this(alias, SHAPE);
    }

    private Shape(Name alias, Table<ShapeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Shape(Name alias, Table<ShapeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Shape(Table<O> child, ForeignKey<O, ShapeRecord> key) {
        super(child, key, SHAPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gtfs.GTFS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SHAPE_PRIMARY, Indexes.SHAPE_SHAPE_FEED_VERSION_FK, Indexes.SHAPE_SHAPE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ShapeRecord> getPrimaryKey() {
        return Keys.KEY_SHAPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ShapeRecord>> getKeys() {
        return Arrays.<UniqueKey<ShapeRecord>>asList(Keys.KEY_SHAPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ShapeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ShapeRecord, ?>>asList(Keys.SHAPE_FEED_VERSION_FK);
    }

    public FeedVersion feedVersion() {
        return new FeedVersion(this, Keys.SHAPE_FEED_VERSION_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Shape as(String alias) {
        return new Shape(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Shape as(Name alias) {
        return new Shape(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shape rename(String name) {
        return new Shape(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shape rename(Name name) {
        return new Shape(name, null);
    }
}
